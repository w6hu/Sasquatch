SODA ASSIGNMENT TEST DOCUMENTATION                                                   by Michael Liu and Wan Hu
=======================================================================================================================
The soda program simualates the complex interactions between various tasks: Parent, Bank, Courier, WATCardOffice, 
Student, VendingMachine, NameServer, Truck, and BottlingPlant.

** NOTE: The testing for the printer is not included since it uses the same printing structure as the previous
         3 assignments; it is assumed that it works properly.


Check Command Line Arguments:
=======================================================================================================================
The configuration file and the random seed are optional arguments passed in to the executable through the command line.

The executable takes the following format:

./soda [ config-file [ random-seed ] ]

Here is the configuration file used (soda.config):

SodaCost                   1    # Manufacturer Suggested Retail Price (MSRP) per bottle
NumStudents                1    # number of students to create
MaxPurchases               1    # maximum number of bottles a student purchases
NumVendingMachines         1    # number of vending machines
MaxStockPerFlavour         1    # maximum number of bottles of each flavour in a vending machine
MaxShippedPerFlavour       1    # maximum number of bottles of each flavour generated by the bottling
                                # plant per production run
TimeBetweenShipments       1    # length of time between shipment pickup
ParentalDelay              1    # length of time between new deposits of funds
NumCouriers                1    # maximum number of couriers in the pool

-------+---------+----------------------------------------------+------------------------------------------------------
Test # | Line #s | Key Point of Test                            | Analysis of Test
-------+---------+----------------------------------------------+------------------------------------------------------
1      | 2-3     | The configuration file must exist            | An error message is printed (ln 3) since the
       |         |                                              | configuration file name "XXX" does not exist. 
-------+---------+----------------------------------------------+------------------------------------------------------
2      | 4-5     | The seed value is greater than 0             | An error message is printed (ln 5) since the random
       |         |                                              | seed is specified to be 0 (ln 4).
-------+---------+----------------------------------------------+------------------------------------------------------
3      | 6-7     | There are max. 3 arguments (including the    | An error message is printed (ln 7) since an extra
       |         | executable name)                             | argument was passed in (ln 6).
-------+---------+----------------------------------------------+------------------------------------------------------
4      | 8-63    | If the config-file or random-seed is not     | Since neither the configuration file nor the random
       |         | specified, the default values are used       | seed was specified (ln 8), the default values are
       |         |                                              | used. By default, the configuration file name is
       |         |                                              | "soda.config" and a random value is used as the seed.
-------+---------+----------------------------------------------+------------------------------------------------------

     1	Script started on Fri 02 Dec 2011 08:23:08 PM EST
     2	1%>linux006:~/Desktop/cs343/a6> ./soda XXX 1
     3	Error: could not open input file "XXX"
     4	1%>linux006:~/Desktop/cs343/a6> ./soda XXX 1./soda soda.config 0
     5	Usage: ./soda [ config-file [ random-seed (> 0) ] ]
     6	1%>linux006:~/Desktop/cs343/a6> ./soda soda.config 1 1
     7	Usage: ./soda [ config-file [ random-seed (> 0) ] ]
     8	1%>linux006:~/Desktop/cs343/a6> ./soda
     9	Parent	WATOff	Names	Truck	Plant	Stud:0	Mach:0	Cour:0
    10	*******	*******	*******	*******	*******	*******	*******	*******
    11	S	S	S
    12	D:0,2		R:0					S
    13	D:0,2				S	S:0,1	S:1
    14	D:0,3	C:0,5	N:0,0	S	G:2	V:0
    15	D:0,2							t:0,5
    16	D:0,2	W						T:0,5
    17	D:0,2
    18	D:0,2
    19	D:0,1
    20	D:0,1
    21	D:0,2			P:2
    22	D:0,2			d:0,2	P		r
    23	D:0,2			U:0,2	G:1
    24	D:0,3			D:0,0			R
    25	D:0,2					V:0
    26	D:0,2		N:0,0
    27	D:0,2					V:0
    28	D:0,2		N:0,0	P:1
    29	D:0,3			d:0,1	P	V:0
    30	D:0,3		N:0,0		G:0
    31	D:0,1
    32	D:0,2						r
    33	D:0,1			U:0,1
    34	D:0,2			D:0,0			R
    35	D:0,1					B:4	B:0,0
    36	...	...	...	...	...	F	...	...
    37				P:0
    38	D:0,1			d:0,0	P
    39	D:0,2				G:3
    40	D:0,3						r
    41	D:0,1			U:0,2
    42	D:0,1			D:0,0			R
    43	D:0,3
    44	D:0,3
    45	D:0,3
    46	D:0,2
    47	D:0,3
    48	D:0,2			P:0
    49	...	...	...	F	...	...	...	...
    50	...	...	...	...	F	...	...	...
    51	D:0,3
    52	D:0,3
    53	...	...	...	...	...	...	F	...
    54	D:0,2
    55	D:0,1
    56	...	...	F	...	...	...	...	...
    57	D:0,2
    58	D:0,3
    59	D:0,1
    60	F	...	...	...	...	...	...	...
    61	...	...	...	...	...	...	...	F
    62	...	F	...	...	...	...	...	...
    63	***********************
    64	1%>linux006:~/Desktop/cs343/a6> exit
    65	exit
       
    66	Script done on Fri 02 Dec 2011 08:24:10 PM EST

We have covered all of the boundary cases for invalid command line arguments. The results are
    as expected so the executable has been shown to successfully validate command line arguments.


Check Interaction Constraints Between Tasks and/or Monitors:
=======================================================================================================================
There are several relationships that are present: 
1) Bottling Plant and Truck (Test #1-5)
2) Truck and Vending Machines (Test #6-8)
3) Vending Machines and Students (Test #9-12)
4) Couriers and WATCardOffice and Students (Test #13-17)
5) NameServer and Students and Vending Machines (Test #18-19)
6) Parent (Test #20)

The executable takes the following format:

./soda [ config-file [ random-seed ] ]

Here is the configuration file used (soda.config):

SodaCost                   8    # Manufacturer Suggested Retail Price (MSRP) per bottle
NumStudents                5    # number of students to create
MaxPurchases               2    # maximum number of bottles a student purchases
NumVendingMachines         2    # number of vending machines
MaxStockPerFlavour         5    # maximum number of bottles of each flavour in a vending machine
MaxShippedPerFlavour       10   # maximum number of bottles of each flavour generated by the bottling
                                # plant per production run
TimeBetweenShipments       30   # length of time between shipment pickup
ParentalDelay              5    # length of time between new deposits of funds
NumCouriers                2    # maximum number of couriers in the pool

** The random seed used is 9001.

-------+---------+----------------------------------------------+------------------------------------------------------
Test # | Line #s | Key Point of Test                            | Analysis of Test
-------+---------+----------------------------------------------+------------------------------------------------------
1      | 22-146  | The Bottling Plant produces a random         | MaxShippedPerFlavour is 10. During any production
       |         | quantity of soda [0, MaxShippedPerFlavour]   | run, the Bottling Plant always produces less than
       |         | for each flavour during a production run.    | or equal to 10 bottles per flavour (<= 40 bottles). 
       |         |                                              | This is shown on lines 22, 33, 43, 53, 64, 76, 90,
       |         |                                              | 98, 108, 118, 126, 136, 146).
-------+---------+----------------------------------------------+------------------------------------------------------
2      | 22-33   | The Bottling Plant does not start a new      | The Bottling Plant waits until the Truck finishes
       |         | production run until the Truck finishes      | delivering the current run; only then will it start
       |         | delivering the current run.                  | up a new production run. For example, the Bottling
       |         |                                              | Plant produced 18 bottles in its first production run
       |         |                                              | (ln 22). The Bottling Plant's second production run
       |         |                                              | only starts  (ln 33) after the Truck finished its
       |         |                                              | first delivery (ln 28).
-------+---------+----------------------------------------------+------------------------------------------------------
3      | 28-33   | The Truck cannot pick up new cargo until     | The Truck must wait until the Bottling Plant finished
       |         | the Bottling Plant finishes the new          | its production before it can load up the cargo and
       |         | production run.                              | deliver it. For example, the Truck only picks up the
       |         |                                              | bottles (ln 33) after the Bottling Plant finished
       |         |                                              | its production run (ln 33). Note that the truck
       |         |                                              | finished its previous delivery (ln 28) before the
       |         |                                              | Bottling Plant finished its production run, but opted
       |         |                                              | to wait for the production run to finish.
-------+---------+----------------------------------------------+------------------------------------------------------
4      | 22-146  | The Truck can only pick up and deliver       | The Truck's delivery capacity is MaxShippedPerFlavour
       |         | less or equal to MaxShippedPerFlavour        | bottles of each flavour. MaxShippedPerFlavour is 10;
       |         | bottles.                                     | therefore the maximum capacity of the truck is 40
       |         |                                              | bottles. The Truck never picks up more than 40
       |         |                                              | bottles in any of its delivery runs (ln 22, 33, 43,
       |         |                                              | 53, 64, 76, 90, 98, 108, 118, 126, 136, 146).
-------+---------+----------------------------------------------+------------------------------------------------------
5      | 39-44   | The Truck discards bottles left over from    | After picking up bottles from a new production run,
       |         | the previous delivery.                       | the number of bottles on the Truck is equal to the 
       |         |                                              | number it picked from the Bottling Plant; all left
       |         |                                              | over bottles are gone. For example, the Truck had 5
       |         |                                              | bottles left from a previous delivery (ln 39). After
       |         |                                              | picking up 17 bottles from the Bottling Plant (ln 43)
       |         |                                              | it delivers 17 bottles to the first Vending Machine
       |         |                                              | on the list (ln 44). The 5 left over bottles are
       |         |                                              | nowhere to be found (they are thrown away).
-------+---------+----------------------------------------------+------------------------------------------------------
6      | 23-28   | The Truck restocks all Vending Machines      | Vending Machine 0 is registered first, and Vending
       |         | in round robin fashion (order that Vending   | Machine 1 is registered last. Therefore, the Truck
       |         | Machines are registered with Name Server).   | delivers to Vending Machine 0 (ln 23-25), followed
       |         |                                              | by Vending Machine 1 (ln 26-28). 
-------+---------+----------------------------------------------+------------------------------------------------------
7      | 34-39   | The Truck completes its delivery when        | There are 2 ways a truck can finish its delivery. 
       |         | 1) it restocks all Vending Machines          | If it finishes restocking all the Vending Machines
       |         | 2) it runs out of bottles                    | (ln 34-39), then there is no more Vending Machines to
       |         |                                              | restock. Alternatively, it cannot restock any more
       |         |                                              | Vending Machines if it has no more bottles left.
-------+---------+----------------------------------------------+------------------------------------------------------
8      | 24      | There is no guarantee that the Truck will    | A Truck may not be able to fully restock a Vending
       | 45      | fully restock a Vending Machine.             | Machine depending on the number of bottles of each
       |         |                                              | flavour it is carrying. For example, during its first
       |         |                                              | delivery, the Truck did not fully restock Vending
       |         |                                              | Machine 0 (ln 24). However, it fully restocks Vending
       |         |                                              | Machine 0 (ln 45) during its third delivery.
-------+---------+----------------------------------------------+------------------------------------------------------
9      | 6-7     | The Vending Machine sells soda bottles at    | When starting, each Vending Machine displays the
       |         | a specified cost.                            | cost to purchase a bottle of soda. For example, both
       |         |                                              | Vending Machine 0 and 1 sell soda bottles at 8
       |         |                                              | dollars (ln 6, 7). The cost is specified by the input
       |         |                                              | configuration file.
-------+---------+----------------------------------------------+------------------------------------------------------
10     | 7-      | The Student makes [1, MaxPurchases]          | When starting, each Student chooses a favourite soda
       |         | purchases of his favourite soda [0, 3] at    | flavour, and how many bottles of that flavour he or
       |         | the Vending Machine.                         | she wishes to buy. For example, Student 0 wants to
       |         |                                              | buy 2 bottles of flavour 2 (ln 7). Student 1 and 3
       |         |                                              | want to buy 1 bottle of flavour 1 (ln 8). Student 2
       |         |                                              | and 4 want to buy 2 bottles of flavour 0 (ln 8).
-------+---------+----------------------------------------------+------------------------------------------------------
11     | 14-24   | The Student busy-waits among Vending         | When the Student tries to buy a soda from a Vending
       |         | Machines until it finds a Vending Machine    | Machine that is out of stock for that specific
       |         | that sells his or her favourite soda (ie.    | flavour, he or she keeps trying different Vending
       |         | (not out of stock).                          | Machines until he or she finds one that contains that
       |         |                                              | has that flavour available. For example, Student 1
       |         |                                              | wants to buy flavour 1 at Vending Machine 1 (ln 9).
       |         |                                              | However, it is out of stock for that flavour, so
       |         |                                              | Student 1 tries the next Machine given by the Name 
       |         |                                              | Server (ln 14). This process continues (ln 14-23)
       |         |                                              | until the Vending Machine that Student 1 is assigned
       |         |                                              | to is finally restocked and has the flavour Student 1
       |         |                                              | wants (ln 24).
-------+---------+----------------------------------------------+------------------------------------------------------
12     | 66-69   | A student cannot buy from the Vending        | While the Vending Machine is being restocked by the
       |         | Machine while it is being restocked.         | Truck, students cannot purchase sodas from that
       |         |                                              | particular Vending Machine. First example, Student 0
       |         |                                              | can only buy from Vending Machine 0 (ln 69) after the
       |         |                                              | restocking process is complete (ln 66-69).
-------+---------+----------------------------------------------+------------------------------------------------------
13     | 24-69   | The Student can only buy a soda from the     | A Student cannot buy from the Vending Machine until
       |         | Vending Machine once the Courier             | the Courier successfully transfers the money to the
       |         | successfully transfers money from the Bank   | student's WATCard. This is because the Vending
       |         | to the WATCard.                              | only takes "real" money. For example, Student 1 is
       |         |                                              | able to successfully purchase soda (ln 69) from
       |         |                                              | Vending Machine 0 (ln 24) only after the Courier has
       |         |                                              | successfully transfered money onto his WATCard
       |         |                                              | (ln 65).
-------+---------+----------------------------------------------+------------------------------------------------------
14     | 28-105  | If the Courier loses the Student's WATCard   | There is a 1 in 6 chance that the Courier can lose a
       |         | during a transfer, the Student attempts to   | Student's WATCard during transfer. For example,
       |         | buy the soda from the Vending Machine again. | Student 3 realized that his WATCard was lost (ln 28)
       |         | The courier may lose the WATCard repeatedly. | so he or she has to try to rebuy from the Vending
       |         |                                              | Machine, which he eventually succeeds (ln 105). 
-------+---------+----------------------------------------------+------------------------------------------------------
15     | 8-63    | Courier completes the transfer when there    | Courier prints state 'T' when it successfully
       |         | is sufficient funds in the Bank AND the      | completes a transfer. The Courier waits until there
       |         | WATCard is not lost during the transfer.     | is sufficient funds in the Bank; then it tries to
       |         |                                              | transfer the money into the Student's WATCard. For
       |         |                                              | example, Courier 1 completes the request to transfer
       |         |                                              | $5 (ln 13) once the Parent deposited more than $5
       |         |                                              | into the Bank account (ln 10, 12). Note that it did
       |         |                                              | not lose the WATCard during the transfer (Student 1
       |         |                                              | did not print state 'L').
-------+---------+----------------------------------------------+------------------------------------------------------
16     | 21-26   | The money on the WATCard is lost forever     | When the Courier loses the WATCard, the transfered
       |         | when the Courier loses the WATCard during    | money from the Bank is lost forever. For example,
       |         | the transfer (Bank does not refund money     | when Student 0 found out Courier 0 lost his or her
       |         | on lost WATCards).                           | WATCard (ln 21), the amount of money in Student 0's
       |         |                                              | Bank account is still decreased by $5 to $1. If a
       |         |                                              | Courier were to try to transfer another $5 to Student
       |         |                                              | 0, it would need to wait until there is $5 in Student
       |         |                                              | 0's Bank account again (ie. ln 26 is where Student 0
       |         |                                              | regains having $5 in his or her bank account).
-------+---------+----------------------------------------------+------------------------------------------------------
17     | 8-9     | The WATCardOffice delegates Jobs to its      | The WATCardOffice is an administrator, meaning that
       |         | Couriers.                                    | it does not do any work other than to delegate tasks
       |         |                                              | to its worker tasks (Couriers). For example, the
       |         |                                              | WATCardOffice takes the Student 0's request to create
       |         |                                              | a WATCard (ln 8) and creates a Job for it (ln 8). It
       |         |                                              | then sits back and lets Courier 0 do the job (ln 9).
-------+---------+----------------------------------------------+------------------------------------------------------
18     | 6-7     | All Vending Machines must register with the  | When the Vending Machine are created, they register
       |         | Nname Server before starting.                | with the NameServer. For example, Vending Machine 0
       |         |                                              | registers with the NameServer before officially
       |         |                                              | starting (ln 8). Similarly, Vending Machine 1 does
       |         |                                              | the same (ln 7).
-------+---------+----------------------------------------------+------------------------------------------------------
19     | 8-24    | The NameServer matches students with         | The NameServer begins by distributing the Students
       |         | Vending Machines in round robin order.       | evenly across the Vending Machines in a round-robin
       |         |                                              | fashion (ln 8-13). When the Student requests a
       |         |                                              | Vending Machine, the NameServer cycles through the
       |         |                                              | Vending Machine list separately for each Student to
       |         |                                              | ensure the Student has a chance to visit every
       |         |                                              | Vending Machine. For example, Student 1 starts off
       |         |                                              | with Vending Machine 1 (ln 9). The next match is
       |         |                                              | Vending Machine 0 (ln 14), followed by Vending
       |         |                                              | Machine 1 (ln 15), and the cycling through all
       |         |                                              | Vending Machines repeats (ln 16-24).
-------+---------+----------------------------------------------+------------------------------------------------------
20     | 8-155   | The Parent randomly deposits [1, 3] dollars  | The Parents periodically puts $1 to $3 into a random
       |         | to a random student [0, NumStudents).        | Student's bank account. For example, the Parent
       |         |                                              | deposits $3 to Student 3 (ln 8), $3 to Student 1
       |         |                                              | (ln 10), another $3 to Student 1 (ln 12), and
       |         |                                              | continues to do so until it terminates (ln 155).
-------+---------+----------------------------------------------+------------------------------------------------------

     1	Script started on Fri 02 Dec 2011 09:07:20 PM EST
     2	1%>linux006:~/Desktop/cs343/a6> ./soda soda.config 9001
     3	Parent	WATOff	Names	Truck	Plant	Stud:0	Stud:1	Stud:2	Stud:3	Stud:4	Mach:0	Mach:1	Cour:0	Cour:1
     4	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******
     5	S	S	S										S	S
     6			R:0								S:8
     7			R:1		S	S:2,2						S:8
     8	D:3,3	C:0,5	N:0,0	S		V:0	S:1,1	S:0,2	S:1,1	S:0,2			t:0,5
     9		W					V:1
    10	D:1,3	C:1,5	N:1,1											t:1,5
    11		W						V:0
    12	D:1,3	C:2,5	N:2,0						V:1
    13		C:3,5	N:3,1							V:0				T:1,5
    14		C:4,5	N:4,0				V:0							t:2,5
    15	D:2,1	W	N:1,0				V:1
    16			N:1,1				V:0
    17	D:0,3		N:1,0				V:1
    18			N:1,1				V:0
    19			N:1,0				V:1
    20	D:0,3		N:1,1				V:0
    21			N:1,0			L	V:1
    22	D:1,3	C:0,5	N:1,1	P:18	G:18		V:0						t:3,5
    23		W	N:1,0	d:0,18	P		V:1
    24			N:1,1	U:0,7			V:0				r
    25				D:0,5
    26	D:1,1		N:1,0	d:1,5							R	r
    27				U:1,15
    28	D:3,3	T:1,13		D:1,0					L			R
    29		C:3,5											t:4,5
    30	D:3,1	W
    31	D:0,3
    32	D:2,1
    33	D:4,3			P:16	G:16
    34				d:0,16	P						r
    35				U:0,2
    36				D:0,11
    37	D:1,3			d:1,11							R	r
    38				U:1,9
    39	D:0,2			D:1,5								R
    40	D:1,1
    41	D:1,3
    42	D:3,2
    43	D:1,2			P:17	G:17
    44	D:3,2			d:0,17	P						r
    45				D:0,15
    46				d:1,15							R	r
    47				U:1,3
    48	D:0,1			D:1,9								R
    49	D:4,1
    50	D:0,2
    51	D:0,1
    52	D:0,1
    53	D:1,3			P:18	G:18
    54				d:0,18	P						r
    55				D:0,18
    56	D:0,3			d:1,18							R	r
    57				U:1,1
    58	D:0,1			D:1,16								R
    59	D:1,1
    60	D:1,1
    61	D:2,3	T:2,13												T:2,5
    62														t:0,5
    63	D:0,3	W												T:0,5
    64		T:0,13			G:10									t:1,13
    65				P:10										T:1,13
    66		W		d:0,10	P						r			t:3,5
    67	D:2,3			D:0,10										T:3,5
    68		W		d:1,10							R	r		t:2,13
    69							B:10				B:1,4
    70	...	...	...	...	...	...	F	...	...	...	...	...	...	...
    71				U:1,1
    72	D:3,3	W		D:1,10								R
    73	D:2,1	T:3,13
    74	D:0,2
    75	D:0,3
    76	D:3,3				G:17
    77	D:0,1			P:17
    78				d:0,17	P						r
    79				D:0,16
    80				d:1,16							R	r
    81				U:1,1
    82	D:4,2	T:4,13		D:1,16								R	T:4,5
    83													t:0,13
    84	D:1,2	W				B:10					B:2,4		T:0,13
    85		W				B:2					B:2,3		t:3,13
    86	...	...	...	...	...	F	...	...	...	...	...	...	...	...
    87	D:4,2
    88	D:3,2
    89	D:1,1
    90	D:1,1			P:17	G:17
    91				d:0,17	P						r
    92				D:0,15
    93	D:0,2			d:1,15							R	r
    94	D:4,2			D:1,14								R
    95	D:4,1
    96	D:0,2
    97	D:0,1
    98	D:1,1			P:16	G:16
    99	D:4,2			d:0,16	P						r
   100				D:0,16
   101				d:1,16							R	r
   102	D:0,1			D:1,16								R
   103	D:2,1
   104	D:3,1
   105	D:3,3								B:10			B:1,4	T:3,13
   106	...	...	...	...	...	...	...	...	F	...	...	...	...	...
   107	D:0,1	W											t:4,13
   108	D:4,3			P:33	G:33
   109				d:0,33	P						r
   110				D:0,33
   111	D:1,2			d:1,33							R	r
   112	D:4,1			D:1,32								R
   113	D:3,3
   114	D:4,3									B:10	B:0,4		T:4,13
   115	D:0,1
   116	D:3,1									B:2	B:0,3
   117	...	...	...	...	...	...	...	...	...	F	...	...	...	...
   118				P:28	G:28
   119	D:0,1			d:0,28	P						r
   120				D:0,26
   121				d:1,26							R	r
   122	D:2,1			D:1,26								R
   123	D:1,3
   124	D:4,3
   125	D:0,3
   126	D:1,3				G:17
   127	D:2,2			P:17
   128				d:0,17	P						r
   129				D:0,17
   130				d:1,17							R	r
   131	D:2,3			D:1,17								R
   132	D:3,1
   133	D:2,1
   134	D:1,1
   135	D:4,3
   136	D:2,1			P:24	G:24			B:10			B:0,4			T:2,13
   137	D:1,2			d:0,24	P						r
   138				D:0,23
   139				d:1,23							R	r
   140								B:2			B:0,4
   141	...	...	...	...	...	...	...	F	...	...	...	...	...	...
   142	D:4,1			D:1,23								R
   143	D:0,3
   144	D:2,3
   145	D:1,2
   146	D:2,2				G:21
   147	...	...	...	F	...	...	...	...	...	...	...	...	...	...
   148	...	...	...	...	F	...	...	...	...	...	...	...	...	...
   149	...	...	...	...	...	...	...	...	...	...	F	...	...	...
   150	D:0,3
   151	...	...	...	...	...	...	...	...	...	...	...	F	...	...
   152	...	...	F	...	...	...	...	...	...	...	...	...	...	...
   153	D:1,2
   154	D:4,3
   155	F	...	...	...	...	...	...	...	...	...	...	...	...	...
   156	...	...	...	...	...	...	...	...	...	...	...	...	F	...
   157	...	...	...	...	...	...	...	...	...	...	...	...	...	F
   158	...	F	...	...	...	...	...	...	...	...	...	...	...	...
   159	***********************
   160	1%>linux006:~/Desktop/cs343/a6> exit
   161	exit
       
   162	Script done on Fri 02 Dec 2011 09:07:24 PM EST

We have covered all of the cases for the interaction between the Tasks and/or Monitors. The results are
    as expected so the executable has been shown to interact while following various constraints.



